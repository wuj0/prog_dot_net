//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xkom
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Xkom_ProjektEntities : DbContext
    {
        public Xkom_ProjektEntities()
            : base("name=Xkom_ProjektEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cena> cena { get; set; }
        public virtual DbSet<ilosc> ilosc { get; set; }
        public virtual DbSet<kategorie> kategorie { get; set; }
        public virtual DbSet<klient> klient { get; set; }
        public virtual DbSet<klient_konto> klient_konto { get; set; }
        public virtual DbSet<koszyk> koszyk { get; set; }
        public virtual DbSet<podkategorie> podkategorie { get; set; }
        public virtual DbSet<produkt> produkt { get; set; }
        public virtual DbSet<produkt_opis> produkt_opis { get; set; }
        public virtual DbSet<status_platnosci> status_platnosci { get; set; }
        public virtual DbSet<zamowienia> zamowienia { get; set; }
        public virtual DbSet<zdj_produktu> zdj_produktu { get; set; }
        public virtual DbSet<produkt_all> produkt_all { get; set; }
        public virtual DbSet<wartosc_zamowienia> wartosc_zamowienia { get; set; }
        public virtual DbSet<zamowienie_all> zamowienie_all { get; set; }
    
        public virtual ObjectResult<string> dodawanie_usera(string nowy_user, string haslo, string zwrotka, string imie, string nazwisko, string nip, string nazwa_firmy, string kod_pocztowy, string miasto, string telefon)
        {
            var nowy_userParameter = nowy_user != null ?
                new ObjectParameter("nowy_user", nowy_user) :
                new ObjectParameter("nowy_user", typeof(string));
    
            var hasloParameter = haslo != null ?
                new ObjectParameter("haslo", haslo) :
                new ObjectParameter("haslo", typeof(string));
    
            var zwrotkaParameter = zwrotka != null ?
                new ObjectParameter("zwrotka", zwrotka) :
                new ObjectParameter("zwrotka", typeof(string));
    
            var imieParameter = imie != null ?
                new ObjectParameter("imie", imie) :
                new ObjectParameter("imie", typeof(string));
    
            var nazwiskoParameter = nazwisko != null ?
                new ObjectParameter("nazwisko", nazwisko) :
                new ObjectParameter("nazwisko", typeof(string));
    
            var nipParameter = nip != null ?
                new ObjectParameter("nip", nip) :
                new ObjectParameter("nip", typeof(string));
    
            var nazwa_firmyParameter = nazwa_firmy != null ?
                new ObjectParameter("nazwa_firmy", nazwa_firmy) :
                new ObjectParameter("nazwa_firmy", typeof(string));
    
            var kod_pocztowyParameter = kod_pocztowy != null ?
                new ObjectParameter("kod_pocztowy", kod_pocztowy) :
                new ObjectParameter("kod_pocztowy", typeof(string));
    
            var miastoParameter = miasto != null ?
                new ObjectParameter("miasto", miasto) :
                new ObjectParameter("miasto", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("telefon", telefon) :
                new ObjectParameter("telefon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("dodawanie_usera", nowy_userParameter, hasloParameter, zwrotkaParameter, imieParameter, nazwiskoParameter, nipParameter, nazwa_firmyParameter, kod_pocztowyParameter, miastoParameter, telefonParameter);
        }
    }
}
